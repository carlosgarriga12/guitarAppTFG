Generar Combinaciones:

Al generar combinaciones de posiciones de trastes para las cuerdas, 
incluir -1 como una opción para representar cuerdas muteadas.

Filtrar Combinaciones con Cuerdas Muteadas:

Después de generar todas las combinaciones posibles, 
aplicar un filtro que permita cuerdas muteadas y verificar que las combinaciones cumplen con las reglas del acorde (máximo de 4 dedos activos o que forman una cejilla).

Condiciones de Validación:

Las combinaciones deben cumplir con las siguientes condiciones:
No más de 4 cuerdas activas (con trastes > 0), a menos 
que se trate de una cejilla válida.
Las cuerdas muteadas deben estar en posiciones permitidas 
(al inicio o al final, no entre las cuerdas activas).

esCejilla(posicionDedos) {
        let trastes = posicionDedos.filter(traste => traste !== -1 && traste !== 0);
        let trasteMinimo = Math.min(...trastes);
        let countTrasteMinimo = trastes.filter(traste => traste === trasteMinimo).length;

        if (countTrasteMinimo >= 2) {
            let notasSuperiores = trastes.filter(traste => traste > trasteMinimo);
            if (notasSuperiores.length + countTrasteMinimo === trastes.length) {
                // Verificar que 0 o -1 están antes del resto de las notas
                for (let i = 0; i < posicionDedos.length; i++) {
                    if (posicionDedos[i] > 0 && posicionDedos.slice(i + 1).some(x => x === -1 || x === 0)) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }

    buscarAcorde(notasAcorde) {
        const cantidadCuerdas = this.afinacion.length;

        let trastesPorCuerda = [];
        for (let i = 0; i < cantidadCuerdas; i++) {
            let trastesEnCuerda = [-1];  // Agregar opción de cuerda muteada
            for (let j = 0; j < this.mastil[i].length; j++) {
                let notaEnTraste = this.mastil[i][j].getName();
                if (notasAcorde.includes(notaEnTraste)) {
                    trastesEnCuerda.push(j);
                }
            }
            trastesPorCuerda.push(trastesEnCuerda);
        }

        console.log("Trastes por cuerda");
        console.log(trastesPorCuerda);

        let combinaciones = [];
        let indices = new Array(cantidadCuerdas).fill(0);
        while (indices[cantidadCuerdas - 1] < trastesPorCuerda[cantidadCuerdas - 1].length) {
            let posicionesDedos = [];
            for (let i = 0; i < cantidadCuerdas; i++) {
                let traste = trastesPorCuerda[i][indices[i]];
                posicionesDedos.push(traste);
            }

            // Verificar si todas las notas del acorde están presentes en la combinación
            let todasLasNotasPresentes = notasAcorde.every(nota => {
                return posicionesDedos.some((traste, cuerda) => {
                    return this.obtenerTrastePorNota(nota, cuerda) === traste;
                });
            });

            if (todasLasNotasPresentes) {
                combinaciones.push(posicionesDedos);
            }

            indices[0]++;
            for (let i = 0; i < cantidadCuerdas - 1; i++) {
                if (indices[i] === trastesPorCuerda[i].length) {
                    indices[i] = 0;
                    indices[i + 1]++;
                }
            }
            if (indices[cantidadCuerdas - 1] >= trastesPorCuerda[cantidadCuerdas - 1].length) {
                break;
            }
        }

        const limiteDistanciaMaxima = 3;

        let combinacionesFiltradas = combinaciones.filter(combinacion => {
            let cantidadDedos = combinacion.filter(traste => traste > 0).length;
            return cantidadDedos <= 4 || this.esCejilla(combinacion);
        }).filter(combinacion => {
            return this.calcularDistanciaMaxima(combinacion) <= limiteDistanciaMaxima;
        });

        console.log("Combinaciones filtradas:");
        console.log(combinacionesFiltradas);
        return combinacionesFiltradas;
    }